 Register New User with Email Verification

function sendVerificationEmail(email) {
  return new Promise((resolve, reject) => {
    if (!email || !email.includes("@")) {
      reject("❌ Invalid email address.");
    } else {
      setTimeout(() => {
        resolve(`📧 Verification email sent to ${email}`);
      }, 1500);
    }
  });
}

async function registerUser(name, email) {
  try {
    if (!name || !email) {
      throw "❌ Name or email is missing.";
    }

    console.log(`👤 Registering ${name}...`);
    const result = await sendVerificationEmail(email);
    console.log(result);
    console.log("✅ Registration complete.");
  } catch (err) {
    console.log(err);
  }
}

registerUser("Esraa", "esraa@example.com");




Booking an Appointment
js
Copy
Edit
function bookAppointment(slotId) {
  const bookedSlots = ["a1", "b3"]; // Simulated unavailable slots

  return new Promise((resolve, reject) => {
    setTimeout(() => {
      if (bookedSlots.includes(slotId)) {
        reject("❌ Slot already booked.");
      } else {
        resolve(`📅 Appointment booked successfully for slot ${slotId}`);
      }
    }, 1000);
  });
}

async function handleBooking(slotId) {
  try {
    console.log("🔎 Checking slot availability...");
    const result = await bookAppointment(slotId);
    console.log(result);
  } catch (err) {
    console.log(err);
  }
}

handleBooking("b3");



Check Server Status with Retry
function pingServer() {
  return new Promise((resolve, reject) => {
    const isOnline = Math.random() > 0.7;
    setTimeout(() => {
      isOnline ? resolve("🟢 Server is online!") : reject("🔴 Server is still offline...");
    }, 1000);
  });
}

async function checkServerWithRetry(maxTries = 5) {
  for (let i = 1; i <= maxTries; i++) {
    try {
      console.log(`🔁 Attempt ${i}...`);
      const status = await pingServer();
      console.log(status);
      return;
    } catch (err) {
      console.log(err);
    }
  }
  console.log("❌ Failed to connect after multiple attempts.");
}

checkServerWithRetry();


Upload a File to Server

function uploadFile(fileName) {
  return new Promise((resolve, reject) => {
    if (!fileName) {
      reject("❌ No file selected.");
    } else {
      setTimeout(() => {
        resolve(`📤 File "${fileName}" uploaded successfully.`);
      }, 2000);
    }
  });
}

async function handleUpload(fileName) {
  try {
    console.log("📂 Uploading file...");
    const result = await uploadFile(fileName);
    console.log(result);
  } catch (err) {
    console.log(err);
  }
}

handleUpload("resume.pdf");



Fetch Product Info
function getProductById(id) {
  const products = { 1: "Laptop", 2: "Phone", 3: "Tablet" };

  return new Promise((resolve, reject) => {
    setTimeout(() => {
      if (products[id]) {
        resolve(`📦 Product: ${products[id]}`);
      } else {
        reject("❌ Product not found.");
      }
    }, 1000);
  });
}

getProductById(2)
  .then((msg) => console.log(msg))
  .catch((err) => console.log(err));



Calculate Shipping Cost
function calculateShipping(weight) {
  return new Promise((resolve, reject) => {
    if (weight <= 0) {
      reject("❌ Invalid weight.");
    } else {
      const cost = weight * 5;
      resolve(`🚚 Shipping cost: $${cost}`);
    }
  });
}

calculateShipping(3)
  .then(console.log)
  .catch(console.log);


Delete Account
function deleteAccount(confirm) {
  return new Promise((resolve, reject) => {
    if (!confirm) {
      reject("⚠️ Deletion canceled.");
    } else {
      setTimeout(() => {
        resolve("🗑️ Account deleted.");
      }, 1500);
    }
  });
}

deleteAccount(true)
  .then(console.log)
  .catch(console.log);

Check Password Strength
function checkPassword(password) {
  return new Promise((resolve, reject) => {
    if (!password || password.length < 6) {
      reject("❌ Weak password.");
    } else {
      resolve("🔐 Password is strong.");
    }
  });
}

checkPassword("hello123")
  .then(console.log)
  .catch(console.log);


// 

fetch("https://jsonplaceholder.typicode.com/users/1")
  .then((res) => {
    if (!res.ok) throw new Error("User not found.");
    return res.json();
  })
  .then((data) => {
    console.log(`👤 Name: ${data.name}`);
    console.log(`📧 Email: ${data.email}`);
  })
  .catch((err) => console.log("❌", err.message));

